#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');
const shell = require('shelljs')
const createHandler = require('github-webhook-handler')
const handler = createHandler({ path: 'http://122.51.41.28', secret: '123456' })
// 上面的 secret 保持和 GitHub 后台设置的一致
const projects = ['vnshop.shudong.wang', 'vnshop', 'deploy', 'deploy-vnshop','nodeserver']
const projectHandler = (event, action) => {
  const project = event.payload.repository.name // 提交的仓库名字
  console.log(project);
  const branch = event.payload.ref
  if (projects.includes(project)) {
      console.log(new Date(), `Received a ${action} event for ${project} to ${branch}`)
      shell.exec(`sh ./projects/${project}.sh`, (code, stdout, stderr) => {
          console.log(new Date(), 'Exit code:', code)
              // console.log(new Date(), 'Program output:', stdout)
          console.log(new Date(), '执行完毕！错误信息：？', stderr)
      })

  }
}
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app.callback());
var server = http.createServer((req, res) => {
  handler(req, res, err => {
      res.statusCode = 404
      res.end('no such location')
  })
}).listen(port, () => {
  console.log(new Date(), `Deploy server Run！port at ${port}`)
  shell.exec('echo shell test OK!', (code, stdout, stderr) => {
      // console.log('Exit code:', code)
      // console.log('Program output:', stdout)
      // console.log('Program stderr:', stderr, stderr === '', !!stderr)

  })
})

handler.on('error', err => {
  console.error('Error:', err.message)
})

handler.on('push', event => { projectHandler(event, 'push') })
handler.on('commit_comment', event => { projectHandler(event, 'commit') })

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
